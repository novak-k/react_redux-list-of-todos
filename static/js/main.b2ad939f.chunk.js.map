{"version":3,"sources":["types/SortType.ts","features/currentTodo.ts","features/filter.ts","features/todos.ts","app/store.ts","app/hooks.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["SortType","actions","todo","type","payload","currentTodoReducer","state","action","query","status","filterInitial","ALL","filterReducer","actoin","todos","todosReducer","filter","id","rootReducer","combineReducers","currentTodo","store","createStore","composeWithDevTools","applyMiddleware","thunk","useAppDispatch","useDispatch","useAppSelector","useSelector","TodoList","dispatch","className","map","title","completed","isTodoSelected","classnames","onClick","selectedTodoActions","TodoFilter","onSubmit","event","preventDefault","value","onChange","filterActions","target","placeholder","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","TodoModal","useState","user","setUser","isError","setIsError","isLoading","setIsLoading","selectedTodo","fetchData","a","userId","currentUser","useEffect","color","email","name","href","App","hasError","setHasError","visibleTodos","useMemo","statusFilter","newTodos","newQuery","toLowerCase","trim","includes","ACTIVE","COMPLETED","getFilteredTodos","getTodosFromServer","arrayTodos","todosActions","length","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b2ad939f.chunk.js","sourcesContent":["export enum SortType {\n  ALL = 'all',\n  ACTIVE = 'active',\n  COMPLETED = 'completed',\n}\n","import { Todo } from '../types/Todo';\n\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\nconst removeTodo = (): RemoveTodoAction => ({ type: 'currentTodo/REMOVE' });\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\nexport const actions = { setTodo, removeTodo };\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'currentTodo/REMOVE':\n      return null;\n    case 'currentTodo/SET':\n      return action.payload;\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","import { SortType } from '../types/SortType';\n\ntype SetQueryAction = { type: 'filter/SET_QUERY', payload: string };\ntype SetStatusAction = { type: 'filter/SET_STATUS', payload: SortType };\ntype SetClearAction = { type: 'filter/SET_CLEAR' };\n\nconst setQuery = (query: string): SetQueryAction => ({\n  type: 'filter/SET_QUERY',\n  payload: query,\n});\n\nconst setStatus = (status: SortType): SetStatusAction => ({\n  type: 'filter/SET_STATUS',\n  payload: status,\n});\n\nconst setClear = (): SetClearAction => ({\n  type: 'filter/SET_CLEAR',\n});\n\nexport const actions = { setClear, setQuery, setStatus };\n\ntype Action = SetClearAction | SetQueryAction | SetStatusAction;\ntype State = { query: string, status: SortType };\n\nconst filterInitial: State = {\n  query: '',\n  status: SortType.ALL,\n};\n\nconst filterReducer = (state = filterInitial, actoin: Action): State => {\n  switch (actoin.type) {\n    case 'filter/SET_CLEAR':\n      return {\n        ...state,\n        query: '',\n      };\n    case 'filter/SET_QUERY':\n      return {\n        ...state,\n        query: actoin.payload,\n      };\n    case 'filter/SET_STATUS':\n      return {\n        ...state,\n        status: actoin.payload,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default filterReducer;\n","import { Todo } from '../types/Todo';\n\ntype SetAction = { type: 'todos/SET', payload: Todo[] };\ntype AddAction = { type: 'todos/ADD', payload: Todo };\ntype RemoveAction = { type: 'todos/REMOVE', payload: Todo };\n\nconst setTodos = (todos: Todo[]): SetAction => ({\n  type: 'todos/SET',\n  payload: todos,\n});\n\nconst addTodo = (todo: Todo): AddAction => ({\n  type: 'todos/ADD',\n  payload: todo,\n});\n\nconst removeTodo = (todo: Todo): RemoveAction => ({\n  type: 'todos/REMOVE',\n  payload: todo,\n});\n\nexport const actions = { setTodos, addTodo, removeTodo };\n\ntype State = Todo[];\ntype Action = SetAction | AddAction | RemoveAction;\n\nconst todosReducer = (state: State = [], action: Action): Todo[] => {\n  const { type, payload } = action;\n\n  switch (type) {\n    case 'todos/SET':\n      return [...payload];\n    case 'todos/ADD':\n      return [...state, payload];\n    case 'todos/REMOVE':\n      return state.filter(todo => todo.id !== payload.id);\n    default:\n      return state;\n  }\n};\n\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\n// The `store` is passed to the Provider in `/src/index.tsx`\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","/* eslint-disable max-len */\nimport React from 'react';\nimport classnames from 'classnames';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as selectedTodoActions } from '../../features/currentTodo';\nimport { Todo } from '../../types/Todo';\n\ntype Props = { todos: Todo[] };\n\nexport const TodoList: React.FC<Props> = ({ todos }) => {\n  const dispatch = useAppDispatch();\n  const currentTodo = useAppSelector(state => state.currentTodo);\n\n  return (\n    <table className=\"table is-narrow is-fullwidth\">\n      <thead>\n        <tr>\n          <th>#</th>\n\n          <th>\n            <span className=\"icon\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </th>\n\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {todos.map((todo) => {\n          const { id, title, completed } = todo;\n          const isTodoSelected = currentTodo?.id === id;\n\n          return (\n            <tr\n              data-cy=\"todo\"\n              className={classnames({\n                'has-background-info-light': isTodoSelected,\n              })}\n              key={id}\n            >\n              <td className=\"is-vcentered\">{id}</td>\n              <td className=\"is-vcentered\">\n                {completed && (\n                  <span className=\"icon\" data-cy=\"iconCompleted\">\n                    <i className=\"fas fa-check\" />\n                  </span>\n                )}\n              </td>\n              <td className=\"is-vcentered is-expanded\">\n                <p className={classnames({\n                  'has-text-danger': !completed,\n                  'has-text-success': completed,\n                })}\n                >\n                  {title}\n                </p>\n              </td>\n              <td className=\"has-text-right is-vcentered\">\n                <button\n                  data-cy=\"selectButton\"\n                  className=\"button\"\n                  type=\"button\"\n                  onClick={() => dispatch(selectedTodoActions.setTodo(todo))}\n                >\n                  <span className=\"icon\">\n                    <i className={classnames(\n                      'far',\n                      {\n                        'fa-eye': !isTodoSelected,\n                        'fa-eye-slash': isTodoSelected,\n                      },\n                    )}\n                    />\n                  </span>\n                </button>\n              </td>\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n};\n","import React from 'react';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as filterActions } from '../../features/filter';\nimport { SortType } from '../../types/SortType';\n\nexport const TodoFilter: React.FC = () => {\n  const dispatch = useAppDispatch();\n\n  const { query, status } = useAppSelector(state => state.filter);\n\n  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    dispatch(filterActions.setQuery(event.target.value));\n  };\n\n  const handleSelectChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    dispatch(filterActions.setStatus(event.target.value as SortType));\n  };\n\n  const handleClearChange = () => dispatch(filterActions.setClear());\n\n  return (\n    <form\n      className=\"field has-addons\"\n      onSubmit={event => event.preventDefault()}\n    >\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={status}\n            onChange={handleSelectChange}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={handleInputChange}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n          {query && (\n            // eslint-disable-next-line jsx-a11y/control-has-associated-label\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={handleClearChange}\n            />\n          )}\n        </span>\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React, { useEffect, useState } from 'react';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\n\nimport { Loader } from '../Loader';\nimport { getUser } from '../../api';\nimport { User } from '../../types/User';\nimport { actions as selectedTodoActions } from '../../features/currentTodo';\n\nexport const TodoModal: React.FC = () => {\n  const [user, setUser] = useState<User | null>(null);\n  const [isError, setIsError] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const dispatch = useAppDispatch();\n  const selectedTodo = useAppSelector(state => state.currentTodo);\n\n  const fetchData = async () => {\n    try {\n      if (selectedTodo) {\n        const currentUser = await getUser(selectedTodo.userId);\n\n        setUser(currentUser);\n        setIsLoading(true);\n      }\n    } catch (error) {\n      setIsError(true);\n    }\n  };\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {!isLoading\n        ? (\n          <Loader />)\n        : (\n          <div className=\"modal-card\">\n            <header className=\"modal-card-head\">\n              <div\n                className=\"modal-card-title has-text-weight-medium\"\n                data-cy=\"modal-header\"\n              >\n                {`Todo #${selectedTodo?.id}`}\n              </div>\n              {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n              <button\n                type=\"button\"\n                className=\"delete\"\n                data-cy=\"modal-close\"\n                onClick={() => dispatch(selectedTodoActions.removeTodo())}\n              />\n            </header>\n\n            <div className=\"modal-card-body\">\n              <p className=\"block\" data-cy=\"modal-title\">\n                {selectedTodo?.title}\n              </p>\n              {isError && (\n                <h2 style={{ color: 'red' }}>\n                  An error occured while user loading\n                </h2>\n              )}\n\n              <p className=\"block\" data-cy=\"modal-user\">\n                {selectedTodo?.completed\n                  ? <strong className=\"has-text-success\">Done</strong>\n                  : <strong className=\"has-text-danger\">Planned</strong>}\n                {' by '}\n                {user?.email && user?.name ? (\n                  <a href={`mailto:${user.email}`}>\n                    {user.name}\n                  </a>\n                ) : null}\n              </p>\n            </div>\n          </div>\n        )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect, useMemo, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\n\nimport { actions as todosActions } from './features/todos';\nimport { useAppDispatch, useAppSelector } from './app/hooks';\nimport { getTodos } from './api';\nimport { SortType } from './types/SortType';\nimport { Todo } from './types/Todo';\n\nconst getFilteredTodos = (\n  todos: Todo[],\n  query: string,\n  statusFilter: SortType,\n): Todo[] => {\n  let newTodos = [...todos];\n\n  if (query) {\n    const newQuery = query.toLowerCase().trim();\n\n    newTodos = newTodos.filter(\n      todo => todo.title.toLowerCase().includes(newQuery),\n    );\n  }\n\n  switch (statusFilter) {\n    case SortType.ACTIVE:\n      newTodos = newTodos.filter(todo => !todo.completed);\n      break;\n    case SortType.COMPLETED:\n      newTodos = newTodos.filter(todo => todo.completed);\n      break;\n    case SortType.ALL:\n    default:\n      break;\n  }\n\n  return newTodos;\n};\n\nexport const App: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const todos = useAppSelector(state => state.todos);\n  const { query, status } = useAppSelector(state => state.filter);\n  const selectedTodo = useAppSelector(state => state.currentTodo);\n  const [isLoading, setIsLoading] = useState(true);\n  const [hasError, setHasError] = useState(false);\n\n  const visibleTodos = useMemo(\n    () => getFilteredTodos(todos, query, status),\n    [todos, query, status],\n  );\n\n  const getTodosFromServer = async () => {\n    try {\n      const arrayTodos = await getTodos();\n\n      dispatch(todosActions.setTodos(arrayTodos));\n      setHasError(false);\n    } catch (error) {\n      setHasError(true);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    getTodosFromServer();\n  }, []);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter />\n            </div>\n\n            <div className=\"block\">\n              {isLoading && <Loader />}\n\n              {hasError\n                ? <p>Error, server is unavailable</p>\n                : <TodoList todos={visibleTodos} />}\n            </div>\n          </div>\n          {!visibleTodos.length && (\n            <p className=\"notification is-warning\">\n              There are no todos matching current filter criteria\n            </p>\n          )}\n        </div>\n      </div>\n\n      {selectedTodo && (\n        <TodoModal />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}